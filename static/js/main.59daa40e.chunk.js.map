{"version":3,"sources":["components/Node.js","components/Astar.js","components/Pathfinder.js","App.js","reportWebVitals.js","index.js"],"names":["Node","isStart","isEnd","row","col","iswall","classes","className","id","heruistic","a","b","Math","abs","x","y","Astar","startNode","endNode","openSet","closedSet","path","visitedNodes","push","leastIndex","i","f","length","current","temp","previous","filter","elt","neighbours","neighbour","includes","tempG","g","newPath","h","error","rows","Pathfinder","useState","Grid","setGrid","Path","setPath","VisitedNodes","setVisitedNodes","useEffect","initalizeGrid","grid","Array","createSpot","addNeighbours","cols","j","Spot","addneighbours","this","random","undefined","console","log","gridwithNode","map","rowIndex","colIndex","onClick","setTimeout","shortestPathNodes","node","document","getElementById","visualizeShortestPath","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.59daa40e.chunk.js","sourcesContent":["  \r\nimport React from \"react\";\r\nimport \"./Node.css\";\r\nimport './Pathfinder';\r\nexport const Node = ({isStart, isEnd,row , col, iswall }) =>{\r\n    const classes = isStart ? \"node-start\" \r\n    : iswall \r\n    ? \"iswall\" \r\n    :isEnd \r\n    ? \"node-end\"\r\n    :\"\";\r\n    return <div className = {`node ${classes}`} id = {`node-${row}-${col}`}></div>;\r\n\r\n};","function Astar(startNode,endNode){\r\n    let openSet = [];\r\n    let closedSet = [];\r\n    let path = [];\r\n    let visitedNodes = [];\r\n\r\n    openSet.push(startNode);\r\n    while(openSet.length>0){\r\n        let leastIndex =0;\r\n        for(let i=0;i<openSet;i++){\r\n            if(openSet[i].f <openSet.length){\r\n                leastIndex = i;\r\n            }\r\n        }\r\n        let current = openSet[leastIndex];\r\n        visitedNodes.push(current);\r\n\r\n        if(current === endNode){\r\n            let temp = current;\r\n            path.push(temp);\r\n            while(temp.previous){\r\n                path.push(temp.previous);\r\n                temp = temp.previous;\r\n            }\r\n\r\n            return {path, visitedNodes};\r\n            console.log(\"Done! path found\");\r\n        }\r\n        openSet = openSet.filter((elt) => elt !== current);\r\n        closedSet.push(current);\r\n\r\n\r\n        let neighbours = current.neighbours;\r\n        for(let i=0;i<neighbours.length;i++){\r\n            let neighbour = neighbours[i];\r\n            if(!closedSet.includes(neighbour) && !neighbour.iswall){\r\n                let tempG = current.g+1;\r\n                let newPath = false;\r\n                if(openSet.includes(neighbour)){\r\n                    if(tempG <neighbour.g){\r\n                        neighbour.g = tempG;\r\n                        newPath = true;\r\n                    }\r\n                }\r\n                else{\r\n                    neighbour.g = tempG;\r\n                    newPath = true;\r\n                    openSet.push(neighbour);\r\n                }\r\n                if(newPath){\r\n                    neighbour.h = heruistic(neighbour, endNode);\r\n                    neighbour.f = neighbour.g + neighbour.f;\r\n                    neighbour.previous = current;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return {path,visitedNodes,error:\"No path found!\"};\r\n}\r\n\r\nfunction heruistic(a,b){\r\n    let d = Math.abs(a.x - a.y) + Math.abs(b.x- b.y);\r\n    return d;\r\n}\r\n\r\nexport default Astar;","import React ,{useState, useEffect} from 'react';\r\nimport {Node} from './Node.js';\r\nimport './Pathfinder.css';\r\nimport './Astar';\r\nimport Astar from './Astar';\r\n\r\n\r\n\r\nlet cols = 28;\r\nlet rows = 10;\r\nlet Node_start_row = 0;\r\nlet Node_start_col = 0;\r\nlet Node_end_row = rows-1;\r\nlet Node_end_col = cols-1;\r\n  \r\n\r\nexport const Pathfinder = () =>{\r\n    const [Grid, setGrid] = useState([]);\r\n    const [Path, setPath] = useState([]);\r\n    const [VisitedNodes, setVisitedNodes] = useState([]);\r\n    const [wall ,setWall] = useState([]);\r\n\r\n\r\n    useEffect (()=>{\r\n        initalizeGrid();\r\n    },[]);\r\n \r\n\r\n\r\n    const initalizeGrid = () =>{\r\n        const grid = new Array(rows);\r\n        for(let i=0;i<rows;i++){\r\n            grid[i] = new Array(cols);\r\n        }\r\n\r\n\r\n        createSpot(grid);\r\n        setGrid(grid);\r\n        addNeighbours(grid);\r\n\r\n        let startNode = grid[Node_start_row][Node_start_col];\r\n        let endNode = grid[Node_end_row][Node_end_col];\r\n       let path =  Astar(startNode,endNode);\r\n       startNode.iswall = false;\r\n       endNode.iswall = false;\r\n       setPath(path.path);\r\n       setVisitedNodes(path.visitedNodes);\r\n   \r\n\r\n\r\n\r\n      \r\n\r\n    \r\n\r\n\r\n    };\r\n\r\n    // const handleClick = ({i,j,iswall}) => {\r\n    //     this.iswall = true;\r\n    //   };\r\n   \r\n \r\n\r\n// for creating the spot \r\n\r\nconst createSpot = (grid) =>{\r\n     for(let i=0;i<rows;i++){\r\n         for(let j=0;j<cols;j++){\r\n             grid[i][j] = new Spot(i,j);\r\n         }\r\n     }\r\n};\r\n\r\n\r\n// for addneighbours;\r\n\r\nconst addNeighbours = (grid) =>{\r\n    for(let i=0;i<rows;i++){\r\n        for(let j=0;j<cols;j++){\r\n            grid[i][j].addneighbours(grid);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Spot(i,j){\r\n    this.x = i;\r\n    this.y = j;\r\n    this.isStart = this.x === Node_start_row && this.y === Node_start_col;\r\n    this.isEnd = this.x === Node_end_row && this.y === Node_end_col;\r\n    this.g= 0;\r\n    this.f= 0;\r\n    this.h=0;\r\n    this.iswall = false;\r\n    if(Math.random(1)<0.1){\r\n        this.iswall = true;\r\n    }\r\n    // <button onClick={handleClick} >j</button>\r\n    this.neighbours = [];\r\n    this.previous = undefined;\r\n    this.addneighbours = function(grid){\r\n        let i = this.x;\r\n        let j = this.y;\r\n        if(i>0) this.neighbours.push(grid[i-1][j]);\r\n        if(i<rows -1) this.neighbours.push(grid[i+1][j]);\r\n        if(j>0) this.neighbours.push(grid[i][j-1]);\r\n        if(j<cols-1) this.neighbours.push(grid[i][j+1]);\r\n    }\r\n}\r\nconsole.log(Grid);\r\n\r\nconst gridwithNode = (\r\n    <div> \r\n    {Grid.map((row,rowIndex)=>{\r\n        return(\r\n            \r\n            <div key = {rowIndex} className= \"rowWrapper\">\r\n                {row.map((col, colIndex)=>{\r\n                    const {isStart, isEnd, iswall} = col;\r\n                    return <Node \r\n                    key = {colIndex} \r\n                    isStart = {isStart} \r\n                    isEnd = {isEnd} \r\n                    row = {rowIndex} \r\n                    col = {colIndex}\r\n                    iswall = {iswall}\r\n                    />;\r\n    \r\n                })}\r\n                \r\n            </div>\r\n            \r\n        );\r\n    })}\r\n    </div>\r\n);\r\n\r\n\r\nconst visualizeShortestPath = (shortestPathNodes)=>{\r\n    for(let i=0;i<shortestPathNodes.length;i++){\r\n        setTimeout(()=>{\r\n            const node = shortestPathNodes[i];\r\n            document.getElementById(`node-${node.x}-${node.y}`).className = \"node node-shortest-path\";\r\n        },10*i);\r\n    }\r\n};\r\n\r\nconst visualizePath = () =>{\r\n    for(let i=0;i<=VisitedNodes.length;i++){\r\n       if(i===VisitedNodes.length){\r\n        setTimeout(()=>{\r\n            visualizeShortestPath(Path);\r\n        },20*i);\r\n    }\r\n    \r\n    else{\r\n        setTimeout(()=>{\r\n        const node = VisitedNodes[i];\r\n            document.getElementById(`node-${node.x}-${node.y}`).className = \"node node-visited\";\r\n        },20*i);\r\n    }\r\n    }\r\n}\r\n\r\n\r\n// const changeStart = (Node_start_row,Node_start_col)=>{\r\n//     Node_start_col=2;\r\n//     Node_start_row = 2;\r\n//     startNode = grid[2][2];\r\n// }\r\n\r\nreturn(\r\n    \r\n    <div className = \"Wrapper\">\r\n    \r\n    <button className=\"btn\" onClick={visualizePath}>Visualize A*</button>\r\n        {gridwithNode}\r\n    </div>\r\n    \r\n);\r\n\r\n};\r\n\r\n","\nimport './App.css';\nimport {Pathfinder} from './components/Pathfinder';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1> Welcome to see the visualization of A* algorithm</h1>\n      <Pathfinder/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}